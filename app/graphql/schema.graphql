schema {
    query: Query
}

input PageSpecs {
    page: Int
    page_length: Int
}

"""
Each field in this filter especification accepts the following commands:

1. __eq__: _equal to_.
2. __gt__: _greater than_
3. __lt__: _lesser than_
4. __ct__: _contains_
5. __bt__: _between two values_. 
6. __in__: _in list_.
7. __sw__: _starts with_
8. __ew__: _ends with_

Usage:
>
**_<command>$<value>_**
>
Where value may be, depending on command, a single element, a list or a range.
>
Each element may be, depending on command and field, a string, int, float ou date. Use pipe (|) as list or range separator, like this ...

> For list:

**_DATA:"in$2020-05-03|2020-03-01|2020-04-30"_**

> For range:

**_DATA:"in$2020-05-03|2020-03-01"_**

To negate the commands, use exclamation mark (!).
>
**_Ex: !eq$, !gt$ ..._**
>
Commands can be combined by using logical operators && (_and_) and || (_or_). Parentheses can be used as well:
>
**_DATA:"(bt$2009-02-01|2009-04-30 && !eq$2009-04-24) || gt$2020-01-01"_**
"""
input FilterEmendas {
    NR_EMENDA: ID,
    NOME_PARLAMENTAR: String,
    TIPO_PARLAMENTAR: String
}

"""
Each field in this filter especification accepts the following commands:

1. __eq__: _equal to_.
2. __gt__: _greater than_
3. __lt__: _lesser than_
4. __ct__: _contains_
5. __bt__: _between two values_. 
6. __in__: _in list_.
7. __sw__: _starts with_
8. __ew__: _ends with_

Usage:
>
**_<command>$<value>_**
>
Where value may be, depending on command, a single element, a list or a range.
>
Each element may be, depending on command and field, a string, int, float ou date. Use pipe (|) as list or range separator, like this ...

> For list:

**_DATA:"in$2020-05-03|2020-03-01|2020-04-30"_**

> For range:

**_DATA:"in$2020-05-03|2020-03-01"_**

To negate the commands, use exclamation mark (!).
>
**_Ex: !eq$, !gt$ ..._**
>
Commands can be combined by using logical operators && (_and_) and || (_or_). Parentheses can be used as well:
>
**_DATA:"(bt$2009-02-01|2009-04-30 && !eq$2009-04-24) || gt$2020-01-01"_**
"""
input FilterProponentes {
    IDENTIF_PROPONENTE: ID,
    NM_PROPONENTE: String,
    UF_PROPONENTE: String,
    MUNIC_PROPONENTE: String,
    COD_MUNIC_IBGE: String
}

"""
Each field in this filter especification accepts the following commands:

1. __eq__: _equal to_.
2. __gt__: _greater than_
3. __lt__: _lesser than_
4. __ct__: _contains_
5. __bt__: _between two values_. 
6. __in__: _in list_.
7. __sw__: _starts with_
8. __ew__: _ends with_

Usage:
>
**_<command>$<value>_**
>
Where value may be, depending on command, a single element, a list or a range.
>
Each element may be, depending on command and field, a string, int, float ou date. Use pipe (|) as list or range separator, like this ...

> For list:

**_DATA:"in$2020-05-03|2020-03-01|2020-04-30"_**

> For range:

**_DATA:"in$2020-05-03|2020-03-01"_**

To negate the commands, use exclamation mark (!).
>
**_Ex: !eq$, !gt$ ..._**
>
Commands can be combined by using logical operators && (_and_) and || (_or_). Parentheses can be used as well:
>
**_DATA:"(bt$2009-02-01|2009-04-30 && !eq$2009-04-24) || gt$2020-01-01"_**
"""
input FilterMovimento {
    NR_CONVENIO: ID,
    DATA: String,
    VALOR: String,
    TIPO: String,
    IDENTIF_FORNECEDOR: String,
    NOME_FORNECEDOR: String
}

"""
Each field in this filter especification accepts the following commands:

1. __eq__: _equal to_.
2. __gt__: _greater than_
3. __lt__: _lesser than_
4. __ct__: _contains_
5. __bt__: _between two values_. 
6. __in__: _in list_.
7. __sw__: _starts with_
8. __ew__: _ends with_

Usage:
>
**_<command>$<value>_**
>
Where value may be, depending on command, a single element, a list or a range.
>
Each element may be, depending on command and field, a string, int, float ou date. Use pipe (|) as list or range separator, like this ...

> For list:

**_DATA:"in$2020-05-03|2020-03-01|2020-04-30"_**

> For range:

**_DATA:"in$2020-05-03|2020-03-01"_**

To negate the commands, use exclamation mark (!).
>
**_Ex: !eq$, !gt$ ..._**
>
Commands can be combined by using logical operators && (_and_) and || (_or_). Parentheses can be used as well:
>
**_DATA:"(bt$2009-02-01|2009-04-30 && !eq$2009-04-24) || gt$2020-01-01"_**
"""
input FilterConvenios {
    NR_CONVENIO: ID, 
    DIA_ASSIN_CONV: String,
    SIT_CONVENIO: String,
    INSTRUMENTO_ATIVO: String,
    DIA_PUBL_CONV: String,
    DIA_INIC_VIGENC_CONV: String,
    DIA_FIM_VIGENC_CONV: String,
    DIA_LIMITE_PREST_CONTAS: String,
    VL_GLOBAL_CONV: String,
    VL_REPASSE_CONV: String,
    VL_CONTRAPARTIDA_CONV: String,
    COD_ORGAO_SUP: String,
    DESC_ORGAO_SUP: String,
    NATUREZA_JURIDICA: String,
    COD_ORGAO: String,
    DESC_ORGAO: String,
    MODALIDADE: String,
    IDENTIF_PROPONENTE: String,
    OBJETO_PROPOSTA: String
}

type Pagination {
    page: Int!
    page_length: Int!
    page_count: Int!
    items_count: Int!
}

type Movimento {
    NR_CONVENIO: String!
    DATA: String
    VALOR: String
    TIPO: String
    IDENTIF_FORNECEDOR: String
    NOME_FORNECEDOR: String
    CONVENIO: Convenio
}

type Proponente {
    IDENTIF_PROPONENTE: ID!
    NM_PROPONENTE: String
    UF_PROPONENTE: String
    MUNIC_PROPONENTE: String
    COD_MUNIC_IBGE: String
    CONVENIOS(page_specs: PageSpecs): ConveniosResult
}

type Convenio {
    NR_CONVENIO: ID!
    DIA_ASSIN_CONV: String
    SIT_CONVENIO: String
    INSTRUMENTO_ATIVO: String
    DIA_PUBL_CONV: String
    DIA_INIC_VIGENC_CONV: String
    DIA_FIM_VIGENC_CONV: String
    DIA_LIMITE_PREST_CONTAS: String
    VL_GLOBAL_CONV: String
    VL_REPASSE_CONV: String
    VL_CONTRAPARTIDA_CONV: String
    COD_ORGAO_SUP: String
    DESC_ORGAO_SUP: String
    NATUREZA_JURIDICA: String
    COD_ORGAO: String
    DESC_ORGAO: String
    MODALIDADE: String
    IDENTIF_PROPONENTE: String
    OBJETO_PROPOSTA: String
    EMENDAS(page_specs: PageSpecs): EmendasResult
    PROPONENTE: Proponente
    MOVIMENTO(page_specs: PageSpecs): MovimentoResult
}

type Emenda {
    NR_EMENDA: ID!
    NOME_PARLAMENTAR: String
    TIPO_PARLAMENTAR: String
    CONVENIOS(page_specs: PageSpecs): ConveniosResult
}

type ConveniosResult {
    pagination: Pagination
    errors: [String]
    convenios: [Convenio]
}

type EmendasResult {
    pagination: Pagination
    errors: [String]
    emendas: [Emenda]
}

type ProponentesResult {
    pagination: Pagination
    errors: [String]
    proponentes: [Proponente]
}

type MovimentoResult {
    pagination: Pagination
    errors: [String]
    movimento: [Movimento]
}

type Query {
    buscarEmendas(
        page_specs: PageSpecs,
        filters: FilterEmendas
        ): EmendasResult!

    buscarProponentes(
        page_specs: PageSpecs,
        filters: FilterProponentes
        ): ProponentesResult!

    buscarMovimento(
        page_specs: PageSpecs,
        filters: FilterMovimento
        ): MovimentoResult!

    buscarConvenios(
        page_specs: PageSpecs,
        filters: FilterConvenios
        ): ConveniosResult!
}
